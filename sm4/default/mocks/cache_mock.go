// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cachemock is a generated GoMock package.
package cachemock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(k string) ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(k interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), k)
}

// GetWriteCache mocks base method.
func (m *MockCache) GetWriteCache(clear bool) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteCache", clear)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetWriteCache indicates an expected call of GetWriteCache.
func (mr *MockCacheMockRecorder) GetWriteCache(clear interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteCache", reflect.TypeOf((*MockCache)(nil).GetWriteCache), clear)
}

// Set mocks base method.
func (m *MockCache) Set(k string, v []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", k, v)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), k, v)
}

// SetWriteCache mocks base method.
func (m *MockCache) SetWriteCache(k string, v []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriteCache", k, v)
}

// SetWriteCache indicates an expected call of SetWriteCache.
func (mr *MockCacheMockRecorder) SetWriteCache(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteCache", reflect.TypeOf((*MockCache)(nil).SetWriteCache), k, v)
}
